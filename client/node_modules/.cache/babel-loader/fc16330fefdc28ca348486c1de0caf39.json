{"ast":null,"code":"var _jsxFileName = \"/Users/michaelwood/Desktop/brainstation/code/pair-programming/client/src/components/DropZone/DropZone.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  padding: '20px',\n  borderWidth: 2,\n  borderRadius: 2,\n  borderColor: '#eeeeee',\n  borderStyle: 'dashed',\n  backgroundColor: '#fafafa',\n  color: '#bdbdbd',\n  transition: 'border .3s ease-in-out'\n};\nconst activeStyle = {\n  borderColor: '#2196f3'\n};\nconst acceptStyle = {\n  borderColor: '#00e676'\n};\nconst rejectStyle = {\n  borderColor: '#ff1744'\n};\n\nfunction DropzoneComponent(props) {\n  _s();\n\n  const [files, setFiles] = useState([]);\n  const onDrop = useCallback(acceptedFiles => {\n    setFiles(acceptedFiles.map(file => Object.assign(file, {\n      preview: URL.createObjectURL(file)\n    })));\n  }, []);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject\n  } = useDropzone({\n    onDrop,\n    accept: 'image/jpeg, image/png'\n  });\n  const style = useMemo(() => ({ ...baseStyle,\n    ...(isDragActive ? activeStyle : {}),\n    ...(isDragAccept ? acceptStyle : {}),\n    ...(isDragReject ? rejectStyle : {})\n  }), [isDragActive, isDragReject, isDragAccept]);\n  const thumbs = files.map(file => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      src: file.preview,\n      alt: file.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, file.name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this)); // clean up\n\n  useEffect(() => () => {\n    files.forEach(file => URL.revokeObjectURL(file.preview));\n  }, [files]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps({\n        style\n      }),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Drag and drop your images here.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n      children: thumbs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DropzoneComponent, \"gkv6dsBCKhudXIuzwZQqqQNP6HU=\", false, function () {\n  return [useDropzone];\n});\n\n_c = DropzoneComponent;\nexport default DropzoneComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"DropzoneComponent\");","map":{"version":3,"sources":["/Users/michaelwood/Desktop/brainstation/code/pair-programming/client/src/components/DropZone/DropZone.js"],"names":["React","useCallback","useEffect","useMemo","useState","useDropzone","baseStyle","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","transition","activeStyle","acceptStyle","rejectStyle","DropzoneComponent","props","files","setFiles","onDrop","acceptedFiles","map","file","Object","assign","preview","URL","createObjectURL","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","accept","style","thumbs","name","forEach","revokeObjectURL"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\n\nconst baseStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  padding: '20px',\n  borderWidth: 2,\n  borderRadius: 2,\n  borderColor: '#eeeeee',\n  borderStyle: 'dashed',\n  backgroundColor: '#fafafa',\n  color: '#bdbdbd',\n  transition: 'border .3s ease-in-out'\n};\n\nconst activeStyle = {\n  borderColor: '#2196f3'\n};\n\nconst acceptStyle = {\n  borderColor: '#00e676'\n};\n\nconst rejectStyle = {\n  borderColor: '#ff1744'\n};\n\nfunction DropzoneComponent(props) {\n  const [files, setFiles] = useState([]);\n\n  const onDrop = useCallback(acceptedFiles => {\n    setFiles(acceptedFiles.map(file => Object.assign(file, {\n      preview: URL.createObjectURL(file)\n    })));\n  }, []);\n\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject\n  } = useDropzone({\n    onDrop,\n    accept: 'image/jpeg, image/png'\n  });\n\n  const style = useMemo(() => ({\n    ...baseStyle,\n    ...(isDragActive ? activeStyle : {}),\n    ...(isDragAccept ? acceptStyle : {}),\n    ...(isDragReject ? rejectStyle : {})\n  }), [\n    isDragActive,\n    isDragReject,\n    isDragAccept\n  ]);\n\n  const thumbs = files.map(file => (\n    <div key={file.name}>\n      <img\n        src={file.preview}\n        alt={file.name}\n      />\n    </div>\n  ));\n\n  // clean up\n  useEffect(() => () => {\n    files.forEach(file => URL.revokeObjectURL(file.preview));\n  }, [files]);\n\n  return (\n    <section>\n      <div {...getRootProps({style})}>\n        <input {...getInputProps()} />\n        <div>Drag and drop your images here.</div>\n      </div>\n      <aside>\n        {thumbs}\n      </aside>\n    </section>\n  )\n}\n\nexport default DropzoneComponent;\n"]},"metadata":{},"sourceType":"module"}