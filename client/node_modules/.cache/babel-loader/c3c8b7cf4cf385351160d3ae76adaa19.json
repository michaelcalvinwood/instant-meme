{"ast":null,"code":"var _jsxFileName = \"/Users/michaelwood/Desktop/brainstation/code/pair-programming/client/src/components/CustomMeme/CustomMeme.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios'; // import meme from \"../../assets/images/meme.jpg\"\n\nimport meme from \"../../assets/images/transparent-meme.png\";\nimport './CustomMeme.scss';\nimport background from \"../../assets/images/meme-background.jpg\";\nimport imageList from \"../../assets/data/imageList.json\";\nimport star from \"../../assets/images/star.svg\";\nimport Header from '../Header/Header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class customMeme extends Component {\n  constructor() {\n    var _this;\n\n    super(...arguments);\n    _this = this;\n    this.state = {\n      meme: meme,\n      defaultMemes: JSON.parse(localStorage.getItem('defaultMemes')) || null,\n      imageName: null\n    };\n\n    this.randomNumber = max => {\n      return Math.floor(Math.random() * max);\n    };\n\n    this.setMeme = meme => {\n      this.setState({\n        meme: meme\n      });\n    };\n\n    this.getcustomMeme = function (top, bottom, meme) {\n      let fontSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '40';\n      let font = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'Impact';\n      const request = {\n        url: 'http://localhost:8080/meme',\n        method: 'post',\n        data: {\n          top: top,\n          bottom: bottom,\n          meme: meme,\n          fontSize: fontSize,\n          font: font\n        }\n      };\n      axios(request).then(response => {\n        console.log(response.data);\n\n        _this.setMeme(response.data.url);\n      }).catch(error => {});\n    };\n\n    this.handleForm = e => {\n      e.preventDefault();\n      const top = e.target.topText.value;\n      const bottom = e.target.bottomText.value;\n      if (this.state.imageName === null) return;\n      this.getcustomMeme(top, bottom, this.state.imageName);\n    };\n\n    this.selectedTitle = name => {\n      this.setState({\n        meme: `https://mywerld.com/images/` + name + '.jpg',\n        imageName: name\n      });\n    };\n  }\n\n  render() {\n    if (!this.state.defaultMemes) {\n      this.getImages();\n      return;\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"custom__background\",\n          src: background\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"custom__container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"custom__flex-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"form\", {\n              className: \"custom__form\",\n              onSubmit: this.handleForm,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"custom__top-text\",\n                  children: \"Top Text\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  className: \"custom__input\",\n                  type: \"text\",\n                  name: \"topText\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"custom__bottom-text\",\n                  children: \"Bottom Text\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  className: \"custom__input\",\n                  type: \"text\",\n                  name: \"bottomText\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"custom__meme-button\",\n                children: \"customMeme\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"custom__reset-button\",\n                children: \"Reset\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"custom__meme-container\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"custom__meme\",\n                src: this.state.meme\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"custom__image-list\",\n            children: imageList.sort().map(imageName => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"custom__image-name\",\n                onClick: () => this.selectedTitle(imageName),\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  className: \"custom__star\",\n                  src: star\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 104,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"custom__image-title\",\n                  children: imageName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 105,\n                  columnNumber: 23\n                }, this)]\n              }, imageName, true, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\nexport default customMeme;","map":{"version":3,"sources":["/Users/michaelwood/Desktop/brainstation/code/pair-programming/client/src/components/CustomMeme/CustomMeme.js"],"names":["React","Component","axios","meme","background","imageList","star","Header","customMeme","state","defaultMemes","JSON","parse","localStorage","getItem","imageName","randomNumber","max","Math","floor","random","setMeme","setState","getcustomMeme","top","bottom","fontSize","font","request","url","method","data","then","response","console","log","catch","error","handleForm","e","preventDefault","target","topText","value","bottomText","selectedTitle","name","render","getImages","sort","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n// import meme from \"../../assets/images/meme.jpg\"\nimport meme from \"../../assets/images/transparent-meme.png\"\nimport './CustomMeme.scss';\nimport background from \"../../assets/images/meme-background.jpg\";\nimport imageList from \"../../assets/data/imageList.json\";\nimport star from \"../../assets/images/star.svg\"\nimport Header from '../Header/Header';\nexport class customMeme extends Component {\n\n  state = {\n    meme: meme,\n    defaultMemes: JSON.parse(localStorage.getItem('defaultMemes')) || null,\n    imageName: null\n  }\n\n  randomNumber = max => {\n    return Math.floor(Math.random() * max);\n  }\n\n  setMeme = (meme) => {\n    this.setState({\n      meme: meme,\n    });\n\n  }\n\n  getcustomMeme = (top, bottom, meme, fontSize = '40', font = 'Impact') => {\n    const request = {\n      url: 'http://localhost:8080/meme',\n      method: 'post',\n      data: {\n        top: top,\n        bottom: bottom,\n        meme: meme,\n        fontSize: fontSize,\n        font: font,\n      }\n    }\n\n    axios(request)\n      .then(response => {\n        console.log(response.data);\n        this.setMeme(response.data.url);\n      })\n      .catch(error => {\n\n      })\n  }\n\n  handleForm = (e) => {\n    e.preventDefault();\n    const top = e.target.topText.value;\n    const bottom = e.target.bottomText.value;\n\n    if (this.state.imageName === null) return;\n\n    this.getcustomMeme(top, bottom, this.state.imageName);\n  }\n\n  selectedTitle = name => {\n    this.setState({\n      meme: `https://mywerld.com/images/` + name + '.jpg',\n      imageName: name\n    })\n  }\n\n  render() {\n    if (!this.state.defaultMemes) {\n      this.getImages();\n      return;\n    }\n\n    return (\n      <>\n        <Header />\n        <div className=\"custom\">\n          <img className=\"custom__background\" src={background} />\n          <div className=\"custom__container\">\n            <div className=\"custom__flex-container\">\n              <form className=\"custom__form\" onSubmit={this.handleForm}>\n                <label>\n                  <p className='custom__top-text'>Top Text</p>\n                  <input className=\"custom__input\" type=\"text\" name=\"topText\"></input>\n                </label>\n                <label>\n                  <p className='custom__bottom-text'>Bottom Text</p>\n                  <input className='custom__input' type=\"text\" name=\"bottomText\"></input>\n                </label>\n                <button className=\"custom__meme-button\">customMeme</button>\n                <button className=\"custom__reset-button\">Reset</button>\n              </form>\n              <div className=\"custom__meme-container\">\n                <img className=\"custom__meme\" src={this.state.meme} />\n              </div>\n            </div>\n            <div className=\"custom__image-list\">\n              {imageList\n                .sort()\n                .map(imageName => {\n                  return (\n                    <div key={imageName} className=\"custom__image-name\" onClick={() => this.selectedTitle(imageName)}>\n                      <img className=\"custom__star\" src={star} />\n                      <p className=\"custom__image-title\">{imageName}</p>\n                    </div>\n                  )\n                })}\n            </div>\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default customMeme"]},"metadata":{},"sourceType":"module"}